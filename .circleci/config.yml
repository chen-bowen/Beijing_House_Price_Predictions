version: 2

orbs:
  python: circleci/python@0.2.1

jobs:
  test_and_publish_model:
    docker:
      - image: circleci/python:3.7.6
    working_directory: ~/project/price_prediction_model
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Install pip
          command: pip install --upgrade pip
      - run:
          name: Install poetry
          command: pip install poetry
      - run:
          name: Install poetry packages
          command: make poetry-install
      - run:
          name: Set script permissions and fetch data
          command: make fetch-dataset
      - run:
          name: Train model
          command: make train
      - run:
          name: Run model test
          command: make test-model
      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: create and upload packages
          command: make package

  test_ml_api:
    docker:
      - image: circleci/python:3.7.6
    working_directory: ~/project/model_api
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Install pip
          command: pip install --upgrade pip
      - run:
          name: Install poetry
          command: pip install poetry
      - run:
          name: Install poetry packages
          command: make poetry-install
      - run:
          name: Run API tests with Python 3.7
          command: make test-api

  differential_tests_ml_api:
    docker:
      - image: circleci/python:3.7.6
    working_directory: ~/project/model_api
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Install pip
          command: pip install --upgrade pip
      - run:
          name: Capturing previous model predictions
          command: |
            pip install -r diff_test_requirements.txt
            PYTHONPATH=. python3 tests/capture_model_predictions.py
      - run:
          name: Running differential tests
          command: |
            make poetry-install
            py.test -vv tests -m differential

  build_and_push_to_heroku_docker:
    docker:
      - image: circleci/python:3.7.6
    working_directory: ~/project/model_api
    steps:
      - checkout:
          path: ~/project
      - setup_remote_docker:
          docker_layer_caching: false
      - run: docker login --username=$HEROKU_EMAIL --password=$HEROKU_API_KEY registry.heroku.com
      - run:
          name: Setup Heroku CLI
          command: |
            wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh
      - run:
          name: Build and Push Image
          command: |
            make build-ml-api-heroku push-ml-api-heroku
      - run:
          name: Release to Heroku
          command: |
            heroku container:release web --app $HEROKU_APP_NAME

workflows:
  version: 2
  build-api-workflow:
    jobs:
      - test_and_publish_model
      - test_ml_api:
          requires:
            - test_and_publish_model
      - differential_tests_ml_api:
          requires:
            - test_and_publish_model
      - build_and_push_to_heroku_docker:
          requires:
            - test_ml_api
            - differential_tests_ml_api
#   section_12_publish_docker_image_to_aws:
#     <<: *defaults
#     working_directory: ~/project/packages/ml_models
#     steps:
#       - checkout
#       - setup_remote_docker
#       - run:
#           name: Publishing docker image to aws ECR
#           command: |
#             sudo pip install awscli
#             eval $(aws ecr get-login --no-include-email --region us-east-1)
#             make build-ml-api-aws tag-ml-api push-ml-api-aws
#             aws ecs update-service --cluster ml-api-cluster --service custom-service --task-definition  first-run-task-definition --force-new-deployment

#   section_13_train_and_upload_neural_network_model:
#     docker:
#       - image: circleci/python:3.6.4-stretch
#     working_directory: ~/project
#     steps:
#       - checkout
#       - *prepare_venv
#       - run:
#           name: Install requirements
#           command: |
#             . venv/bin/activate
#             pip install -r packages/neural_network_model/requirements.txt
#       - run:
#           name: Fetch Training data - 2GB
#           command: |
#             . venv/bin/activate
#             chmod +x ./scripts/fetch_kaggle_large_dataset.sh
#             ./scripts/fetch_kaggle_large_dataset.sh
#       - run:
#           name: Train model
#           command: |
#             . venv/bin/activate
#             PYTHONPATH=./packages/neural_network_model python3 packages/neural_network_model/neural_network_model/train_pipeline.py
#       - run:
#           name: Publish model to Gemfury
#           command: |
#             . venv/bin/activate
#             chmod +x ./scripts/publish_model.sh
#             ./scripts/publish_model.sh ./packages/neural_network_model/

# - test_ml_api_py38 pending NN model update
# - section_9_differential_tests
# - train_and_upload_regression_model:
#     requires:
#       - test_regression_model_py36
#       - test_regression_model_py37
#       - test_regression_model_py38
#       - test_ml_api_py36
#       - test_ml_api_py37
#       - section_9_differential_tests
#     filters:
#       branches:
#         only:
#           - master
# - section_12_publish_docker_image_to_aws:
#     requires:
#       - train_and_upload_regression_model
#     filters:
#       branches:
#         only:
#           - master
#      - section_13_train_and_upload_neural_network_model:
#          requires:
#            - test_regression_model
#            - test_ml_api
#            - section_9_differential_tests
# - train_and_upload_regression_model
# filters:
#   branches:
#     only:
#       - master
